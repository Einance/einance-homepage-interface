{"version":3,"sources":["../node_modules/bs58check/index.js","../node_modules/bs58check/base.js","../node_modules/base-x/src/index.js","../node_modules/bnc-onboard/dist/esm/hd-wallet-642b97e3.js","../node_modules/hdkey/lib/hdkey.js","../node_modules/hdkey/node_modules/secp256k1/elliptic.js","../node_modules/hdkey/node_modules/secp256k1/lib/index.js","../node_modules/hdkey/node_modules/secp256k1/lib/elliptic.js","../node_modules/bs58/index.js"],"names":["createHash","require","bs58checkBase","module","exports","buffer","tmp","update","digest","base58","Buffer","checksumFn","decodeRaw","payload","slice","checksum","newChecksum","encode","concat","length","decode","string","Error","decodeUnsafe","_Buffer","ALPHABET","TypeError","BASE_MAP","Uint8Array","j","i","x","charAt","xc","charCodeAt","BASE","LEADER","FACTOR","Math","log","iFACTOR","source","alloc","psz","zeroes","size","b256","carry","it3","it4","vch","allocUnsafe","fill","Array","isArray","from","isBuffer","pbegin","pend","b58","it1","it2","str","repeat","publicToAddress","ethUtil","toChecksumAddress","generateAddresses","account","offset","publicKey","chainCode","path","hdk","HDKey","addresses","dkey","deriveChild","address","toString","push","dPath","isValidPath","parts","split","undefined","accountFieldDigit","Number","isNaN","changeFieldDigit","addressFieldDigit","assert","crypto","bs58check","secp256k1","MASTER_SECRET","HARDENED_OFFSET","BITCOIN_VERSIONS","private","public","versions","this","depth","index","_privateKey","_publicKey","_fingerprint","parentFingerprint","serialize","hdkey","version","key","writeUInt32BE","writeUInt8","fingerprint","copy","hash160","buf","sha","Object","defineProperty","prototype","get","_identifier","identifier","set","value","equal","privateKeyVerify","publicKeyCreate","readUInt32BE","publicKeyVerify","publicKeyConvert","privateKey","derive","entries","forEach","c","hardened","childIndex","parseInt","test","data","isHardened","indexBuffer","pk","zb","I","createHmac","IL","IR","hd","privateKeyTweakAdd","err","publicKeyTweakAdd","sign","hash","ecdsaSign","signature","verify","ecdsaVerify","wipePrivateData","randomBytes","toJSON","xpriv","privateExtendedKey","xpub","publicExtendedKey","fromMasterSeed","seedBuffer","fromExtendedKey","base58key","keyBuffer","readUInt8","fromJSON","obj","errors","cond","msg","isUint8Array","name","numbers","join","includes","isCompressed","toTypeString","getAssertedOutput","output","len","call","contextRandomize","seed","seckey","privateKeyNegate","tweak","privateKeyTweakMul","pubkey","compressed","publicKeyNegate","publicKeyCombine","pubkeys","publicKeyTweakMul","signatureNormalize","sig","signatureExport","outputlen","signatureImport","msg32","options","noncefn","recid","ecdsaRecover","ecdh","hashfn","xbuf","ybuf","ec","EC","ecparams","curve","BN","n","constructor","loadPublicKey","first","cmp","p","y","toRed","red","redSqr","redIMul","redIAdd","b","redSqrt","isOdd","redNeg","keyPair","pub","loadCompressedPublicKey","subarray","x3","redISub","isZero","loadUncompressedPublicKey","savePublicKey","point","bn","negate","sub","umod","toArrayLike","iadd","isub","tweaked","imul","keyFromPrivate","getPublic","pair","pairs","add","isInfinity","g","mul","r","s","nh","sigR","sigS","lenR","posR","lenS","posS","message","_noncefn","counter","nonce","d","canonical","k","pers","recoveryParam","sigObj","sigr","sigs","recoverPubKey","scalar","sha256","getX","toArray","getY","basex"],"mappings":"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","file":"static/js/7.eaa32ff7.chunk.js","sourcesContent":["'use strict'\n\nvar createHash = require('create-hash')\nvar bs58checkBase = require('./base')\n\n// SHA256(SHA256(buffer))\nfunction sha256x2 (buffer) {\n  var tmp = createHash('sha256').update(buffer).digest()\n  return createHash('sha256').update(tmp).digest()\n}\n\nmodule.exports = bs58checkBase(sha256x2)\n","'use strict'\n\nvar base58 = require('bs58')\nvar Buffer = require('safe-buffer').Buffer\n\nmodule.exports = function (checksumFn) {\n  // Encode a buffer as a base58-check encoded string\n  function encode (payload) {\n    var checksum = checksumFn(payload)\n\n    return base58.encode(Buffer.concat([\n      payload,\n      checksum\n    ], payload.length + 4))\n  }\n\n  function decodeRaw (buffer) {\n    var payload = buffer.slice(0, -4)\n    var checksum = buffer.slice(-4)\n    var newChecksum = checksumFn(payload)\n\n    if (checksum[0] ^ newChecksum[0] |\n        checksum[1] ^ newChecksum[1] |\n        checksum[2] ^ newChecksum[2] |\n        checksum[3] ^ newChecksum[3]) return\n\n    return payload\n  }\n\n  // Decode a base58-check encoded string to a buffer, no result if checksum is wrong\n  function decodeUnsafe (string) {\n    var buffer = base58.decodeUnsafe(string)\n    if (!buffer) return\n\n    return decodeRaw(buffer)\n  }\n\n  function decode (string) {\n    var buffer = base58.decode(string)\n    var payload = decodeRaw(buffer, checksumFn)\n    if (!payload) throw new Error('Invalid checksum')\n    return payload\n  }\n\n  return {\n    encode: encode,\n    decode: decode,\n    decodeUnsafe: decodeUnsafe\n  }\n}\n","'use strict'\n// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\n// @ts-ignore\nvar _Buffer = require('safe-buffer').Buffer\nfunction base (ALPHABET) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256)\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i)\n    var xc = x.charCodeAt(0)\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i\n  }\n  var BASE = ALPHABET.length\n  var LEADER = ALPHABET.charAt(0)\n  var FACTOR = Math.log(BASE) / Math.log(256) // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE) // log(256) / log(BASE), rounded up\n  function encode (source) {\n    if (Array.isArray(source) || source instanceof Uint8Array) { source = _Buffer.from(source) }\n    if (!_Buffer.isBuffer(source)) { throw new TypeError('Expected Buffer') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0\n    var length = 0\n    var pbegin = 0\n    var pend = source.length\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++\n      zeroes++\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0\n    var b58 = new Uint8Array(size)\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin]\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0\n        b58[it1] = (carry % BASE) >>> 0\n        carry = (carry / BASE) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      pbegin++\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length\n    while (it2 !== size && b58[it2] === 0) {\n      it2++\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes)\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]) }\n    return str\n  }\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return _Buffer.alloc(0) }\n    var psz = 0\n        // Skip leading spaces.\n    if (source[psz] === ' ') { return }\n        // Skip and count leading '1's.\n    var zeroes = 0\n    var length = 0\n    while (source[psz] === LEADER) {\n      zeroes++\n      psz++\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0 // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size)\n        // Process the characters.\n    while (source[psz]) {\n            // Decode character\n      var carry = BASE_MAP[source.charCodeAt(psz)]\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0\n        b256[it3] = (carry % 256) >>> 0\n        carry = (carry / 256) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      psz++\n    }\n        // Skip trailing spaces.\n    if (source[psz] === ' ') { return }\n        // Skip leading zeroes in b256.\n    var it4 = size - length\n    while (it4 !== size && b256[it4] === 0) {\n      it4++\n    }\n    var vch = _Buffer.allocUnsafe(zeroes + (size - it4))\n    vch.fill(0x00, 0, zeroes)\n    var j = zeroes\n    while (it4 !== size) {\n      vch[j++] = b256[it4++]\n    }\n    return vch\n  }\n  function decode (string) {\n    var buffer = decodeUnsafe(string)\n    if (buffer) { return buffer }\n    throw new Error('Non-base' + BASE + ' character')\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nmodule.exports = base\n","import HDKey from 'hdkey';\nimport * as ethUtil from 'ethereumjs-util';\nimport { Buffer } from 'buffer';\nvar publicToAddress = ethUtil.publicToAddress,\n    toChecksumAddress = ethUtil.toChecksumAddress;\nvar numberToGet = 5;\n\nfunction generateAddresses(account, offset) {\n  var publicKey = account.publicKey,\n      chainCode = account.chainCode,\n      path = account.path;\n  var hdk = new HDKey();\n  hdk.publicKey = new Buffer(publicKey, 'hex');\n  hdk.chainCode = new Buffer(chainCode, 'hex');\n  var addresses = [];\n\n  for (var i = offset; i < numberToGet + offset; i++) {\n    var dkey = hdk.deriveChild(i);\n    var address = publicToAddress(dkey.publicKey, true).toString('hex');\n    addresses.push({\n      dPath: \"\".concat(path, \"/\").concat(i),\n      address: toChecksumAddress(\"0x\".concat(address))\n    });\n  }\n\n  return addresses;\n}\n\nfunction isValidPath(path) {\n  var parts = path.split('/');\n\n  if (parts[0] !== 'm') {\n    return false;\n  }\n\n  if (parts[1] !== \"44'\") {\n    return false;\n  }\n\n  if (parts[2] !== \"60'\" && parts[2] !== \"1'\") {\n    return false;\n  }\n\n  if (parts[3] === undefined) {\n    return true;\n  }\n\n  var accountFieldDigit = Number(parts[3][0]);\n\n  if (isNaN(accountFieldDigit) || accountFieldDigit < 0 || parts[3][1] !== \"'\") {\n    return false;\n  }\n\n  if (parts[4] === undefined) {\n    return true;\n  }\n\n  var changeFieldDigit = Number(parts[4][0]);\n\n  if (isNaN(changeFieldDigit) || changeFieldDigit < 0) {\n    return false;\n  }\n\n  if (parts[5] === undefined) {\n    return true;\n  }\n\n  var addressFieldDigit = Number(parts[5][0]);\n\n  if (isNaN(addressFieldDigit) || addressFieldDigit < 0) {\n    return false;\n  }\n\n  return true;\n}\n\nexport { generateAddresses, isValidPath };","var assert = require('assert')\nvar Buffer = require('safe-buffer').Buffer\nvar crypto = require('crypto')\nvar bs58check = require('bs58check')\nvar secp256k1 = require('secp256k1')\n\nvar MASTER_SECRET = Buffer.from('Bitcoin seed', 'utf8')\nvar HARDENED_OFFSET = 0x80000000\nvar LEN = 78\n\n// Bitcoin hardcoded by default, can use package `coininfo` for others\nvar BITCOIN_VERSIONS = {private: 0x0488ADE4, public: 0x0488B21E}\n\nfunction HDKey (versions) {\n  this.versions = versions || BITCOIN_VERSIONS\n  this.depth = 0\n  this.index = 0\n  this._privateKey = null\n  this._publicKey = null\n  this.chainCode = null\n  this._fingerprint = 0\n  this.parentFingerprint = 0\n}\n\nObject.defineProperty(HDKey.prototype, 'fingerprint', { get: function () { return this._fingerprint } })\nObject.defineProperty(HDKey.prototype, 'identifier', { get: function () { return this._identifier } })\nObject.defineProperty(HDKey.prototype, 'pubKeyHash', { get: function () { return this.identifier } })\n\nObject.defineProperty(HDKey.prototype, 'privateKey', {\n  get: function () {\n    return this._privateKey\n  },\n  set: function (value) {\n    assert.equal(value.length, 32, 'Private key must be 32 bytes.')\n    assert(secp256k1.privateKeyVerify(value) === true, 'Invalid private key')\n\n    this._privateKey = value\n    this._publicKey = Buffer.from(secp256k1.publicKeyCreate(value, true))\n    this._identifier = hash160(this.publicKey)\n    this._fingerprint = this._identifier.slice(0, 4).readUInt32BE(0)\n  }\n})\n\nObject.defineProperty(HDKey.prototype, 'publicKey', {\n  get: function () {\n    return this._publicKey\n  },\n  set: function (value) {\n    assert(value.length === 33 || value.length === 65, 'Public key must be 33 or 65 bytes.')\n    assert(secp256k1.publicKeyVerify(value) === true, 'Invalid public key')\n\n    this._publicKey = Buffer.from(secp256k1.publicKeyConvert(value, true)) // force compressed point\n    this._identifier = hash160(this.publicKey)\n    this._fingerprint = this._identifier.slice(0, 4).readUInt32BE(0)\n    this._privateKey = null\n  }\n})\n\nObject.defineProperty(HDKey.prototype, 'privateExtendedKey', {\n  get: function () {\n    if (this._privateKey) return bs58check.encode(serialize(this, this.versions.private, Buffer.concat([Buffer.alloc(1, 0), this.privateKey])))\n    else return null\n  }\n})\n\nObject.defineProperty(HDKey.prototype, 'publicExtendedKey', {\n  get: function () {\n    return bs58check.encode(serialize(this, this.versions.public, this.publicKey))\n  }\n})\n\nHDKey.prototype.derive = function (path) {\n  if (path === 'm' || path === 'M' || path === \"m'\" || path === \"M'\") {\n    return this\n  }\n\n  var entries = path.split('/')\n  var hdkey = this\n  entries.forEach(function (c, i) {\n    if (i === 0) {\n      assert(/^[mM]{1}/.test(c), 'Path must start with \"m\" or \"M\"')\n      return\n    }\n\n    var hardened = (c.length > 1) && (c[c.length - 1] === \"'\")\n    var childIndex = parseInt(c, 10) // & (HARDENED_OFFSET - 1)\n    assert(childIndex < HARDENED_OFFSET, 'Invalid index')\n    if (hardened) childIndex += HARDENED_OFFSET\n\n    hdkey = hdkey.deriveChild(childIndex)\n  })\n\n  return hdkey\n}\n\nHDKey.prototype.deriveChild = function (index) {\n  var isHardened = index >= HARDENED_OFFSET\n  var indexBuffer = Buffer.allocUnsafe(4)\n  indexBuffer.writeUInt32BE(index, 0)\n\n  var data\n\n  if (isHardened) { // Hardened child\n    assert(this.privateKey, 'Could not derive hardened child key')\n\n    var pk = this.privateKey\n    var zb = Buffer.alloc(1, 0)\n    pk = Buffer.concat([zb, pk])\n\n    // data = 0x00 || ser256(kpar) || ser32(index)\n    data = Buffer.concat([pk, indexBuffer])\n  } else { // Normal child\n    // data = serP(point(kpar)) || ser32(index)\n    //      = serP(Kpar) || ser32(index)\n    data = Buffer.concat([this.publicKey, indexBuffer])\n  }\n\n  var I = crypto.createHmac('sha512', this.chainCode).update(data).digest()\n  var IL = I.slice(0, 32)\n  var IR = I.slice(32)\n\n  var hd = new HDKey(this.versions)\n\n  // Private parent key -> private child key\n  if (this.privateKey) {\n    // ki = parse256(IL) + kpar (mod n)\n    try {\n      hd.privateKey = Buffer.from(secp256k1.privateKeyTweakAdd(Buffer.from(this.privateKey), IL))\n      // throw if IL >= n || (privateKey + IL) === 0\n    } catch (err) {\n      // In case parse256(IL) >= n or ki == 0, one should proceed with the next value for i\n      return this.deriveChild(index + 1)\n    }\n  // Public parent key -> public child key\n  } else {\n    // Ki = point(parse256(IL)) + Kpar\n    //    = G*IL + Kpar\n    try {\n      hd.publicKey = Buffer.from(secp256k1.publicKeyTweakAdd(Buffer.from(this.publicKey), IL, true))\n      // throw if IL >= n || (g**IL + publicKey) is infinity\n    } catch (err) {\n      // In case parse256(IL) >= n or Ki is the point at infinity, one should proceed with the next value for i\n      return this.deriveChild(index + 1)\n    }\n  }\n\n  hd.chainCode = IR\n  hd.depth = this.depth + 1\n  hd.parentFingerprint = this.fingerprint// .readUInt32BE(0)\n  hd.index = index\n\n  return hd\n}\n\nHDKey.prototype.sign = function (hash) {\n  return Buffer.from(secp256k1.ecdsaSign(hash, this.privateKey).signature)\n}\n\nHDKey.prototype.verify = function (hash, signature) {\n  return secp256k1.ecdsaVerify(\n    Uint8Array.from(signature),\n    Uint8Array.from(hash),\n    Uint8Array.from(this.publicKey)\n  )\n}\n\nHDKey.prototype.wipePrivateData = function () {\n  if (this._privateKey) crypto.randomBytes(this._privateKey.length).copy(this._privateKey)\n  this._privateKey = null\n  return this\n}\n\nHDKey.prototype.toJSON = function () {\n  return {\n    xpriv: this.privateExtendedKey,\n    xpub: this.publicExtendedKey\n  }\n}\n\nHDKey.fromMasterSeed = function (seedBuffer, versions) {\n  var I = crypto.createHmac('sha512', MASTER_SECRET).update(seedBuffer).digest()\n  var IL = I.slice(0, 32)\n  var IR = I.slice(32)\n\n  var hdkey = new HDKey(versions)\n  hdkey.chainCode = IR\n  hdkey.privateKey = IL\n\n  return hdkey\n}\n\nHDKey.fromExtendedKey = function (base58key, versions) {\n  // => version(4) || depth(1) || fingerprint(4) || index(4) || chain(32) || key(33)\n  versions = versions || BITCOIN_VERSIONS\n  var hdkey = new HDKey(versions)\n\n  var keyBuffer = bs58check.decode(base58key)\n\n  var version = keyBuffer.readUInt32BE(0)\n  assert(version === versions.private || version === versions.public, 'Version mismatch: does not match private or public')\n\n  hdkey.depth = keyBuffer.readUInt8(4)\n  hdkey.parentFingerprint = keyBuffer.readUInt32BE(5)\n  hdkey.index = keyBuffer.readUInt32BE(9)\n  hdkey.chainCode = keyBuffer.slice(13, 45)\n\n  var key = keyBuffer.slice(45)\n  if (key.readUInt8(0) === 0) { // private\n    assert(version === versions.private, 'Version mismatch: version does not match private')\n    hdkey.privateKey = key.slice(1) // cut off first 0x0 byte\n  } else {\n    assert(version === versions.public, 'Version mismatch: version does not match public')\n    hdkey.publicKey = key\n  }\n\n  return hdkey\n}\n\nHDKey.fromJSON = function (obj) {\n  return HDKey.fromExtendedKey(obj.xpriv)\n}\n\nfunction serialize (hdkey, version, key) {\n  // => version(4) || depth(1) || fingerprint(4) || index(4) || chain(32) || key(33)\n  var buffer = Buffer.allocUnsafe(LEN)\n\n  buffer.writeUInt32BE(version, 0)\n  buffer.writeUInt8(hdkey.depth, 4)\n\n  var fingerprint = hdkey.depth ? hdkey.parentFingerprint : 0x00000000\n  buffer.writeUInt32BE(fingerprint, 5)\n  buffer.writeUInt32BE(hdkey.index, 9)\n\n  hdkey.chainCode.copy(buffer, 13)\n  key.copy(buffer, 45)\n\n  return buffer\n}\n\nfunction hash160 (buf) {\n  var sha = crypto.createHash('sha256').update(buf).digest()\n  return crypto.createHash('ripemd160').update(sha).digest()\n}\n\nHDKey.HARDENED_OFFSET = HARDENED_OFFSET\nmodule.exports = HDKey\n","module.exports = require('./lib')(require('./lib/elliptic'))\n","const errors = {\n  IMPOSSIBLE_CASE: 'Impossible case. Please create issue.',\n  TWEAK_ADD:\n    'The tweak was out of range or the resulted private key is invalid',\n  TWEAK_MUL: 'The tweak was out of range or equal to zero',\n  CONTEXT_RANDOMIZE_UNKNOW: 'Unknow error on context randomization',\n  SECKEY_INVALID: 'Private Key is invalid',\n  PUBKEY_PARSE: 'Public Key could not be parsed',\n  PUBKEY_SERIALIZE: 'Public Key serialization error',\n  PUBKEY_COMBINE: 'The sum of the public keys is not valid',\n  SIG_PARSE: 'Signature could not be parsed',\n  SIGN: 'The nonce generation function failed, or the private key was invalid',\n  RECOVER: 'Public key could not be recover',\n  ECDH: 'Scalar was invalid (zero or overflow)'\n}\n\nfunction assert (cond, msg) {\n  if (!cond) throw new Error(msg)\n}\n\nfunction isUint8Array (name, value, length) {\n  assert(value instanceof Uint8Array, `Expected ${name} to be an Uint8Array`)\n\n  if (length !== undefined) {\n    if (Array.isArray(length)) {\n      const numbers = length.join(', ')\n      const msg = `Expected ${name} to be an Uint8Array with length [${numbers}]`\n      assert(length.includes(value.length), msg)\n    } else {\n      const msg = `Expected ${name} to be an Uint8Array with length ${length}`\n      assert(value.length === length, msg)\n    }\n  }\n}\n\nfunction isCompressed (value) {\n  assert(toTypeString(value) === 'Boolean', 'Expected compressed to be a Boolean')\n}\n\nfunction getAssertedOutput (output = (len) => new Uint8Array(len), length) {\n  if (typeof output === 'function') output = output(length)\n  isUint8Array('output', output, length)\n  return output\n}\n\nfunction toTypeString (value) {\n  return Object.prototype.toString.call(value).slice(8, -1)\n}\n\nmodule.exports = (secp256k1) => {\n  return {\n    contextRandomize (seed) {\n      assert(\n        seed === null || seed instanceof Uint8Array,\n        'Expected seed to be an Uint8Array or null'\n      )\n      if (seed !== null) isUint8Array('seed', seed, 32)\n\n      switch (secp256k1.contextRandomize(seed)) {\n        case 1:\n          throw new Error(errors.CONTEXT_RANDOMIZE_UNKNOW)\n      }\n    },\n\n    privateKeyVerify (seckey) {\n      isUint8Array('private key', seckey, 32)\n\n      return secp256k1.privateKeyVerify(seckey) === 0\n    },\n\n    privateKeyNegate (seckey) {\n      isUint8Array('private key', seckey, 32)\n\n      switch (secp256k1.privateKeyNegate(seckey)) {\n        case 0:\n          return seckey\n        case 1:\n          throw new Error(errors.IMPOSSIBLE_CASE)\n      }\n    },\n\n    privateKeyTweakAdd (seckey, tweak) {\n      isUint8Array('private key', seckey, 32)\n      isUint8Array('tweak', tweak, 32)\n\n      switch (secp256k1.privateKeyTweakAdd(seckey, tweak)) {\n        case 0:\n          return seckey\n        case 1:\n          throw new Error(errors.TWEAK_ADD)\n      }\n    },\n\n    privateKeyTweakMul (seckey, tweak) {\n      isUint8Array('private key', seckey, 32)\n      isUint8Array('tweak', tweak, 32)\n\n      switch (secp256k1.privateKeyTweakMul(seckey, tweak)) {\n        case 0:\n          return seckey\n        case 1:\n          throw new Error(errors.TWEAK_MUL)\n      }\n    },\n\n    publicKeyVerify (pubkey) {\n      isUint8Array('public key', pubkey, [33, 65])\n\n      return secp256k1.publicKeyVerify(pubkey) === 0\n    },\n\n    publicKeyCreate (seckey, compressed = true, output) {\n      isUint8Array('private key', seckey, 32)\n      isCompressed(compressed)\n      output = getAssertedOutput(output, compressed ? 33 : 65)\n\n      switch (secp256k1.publicKeyCreate(output, seckey)) {\n        case 0:\n          return output\n        case 1:\n          throw new Error(errors.SECKEY_INVALID)\n        case 2:\n          throw new Error(errors.PUBKEY_SERIALIZE)\n      }\n    },\n\n    publicKeyConvert (pubkey, compressed = true, output) {\n      isUint8Array('public key', pubkey, [33, 65])\n      isCompressed(compressed)\n      output = getAssertedOutput(output, compressed ? 33 : 65)\n\n      switch (secp256k1.publicKeyConvert(output, pubkey)) {\n        case 0:\n          return output\n        case 1:\n          throw new Error(errors.PUBKEY_PARSE)\n        case 2:\n          throw new Error(errors.PUBKEY_SERIALIZE)\n      }\n    },\n\n    publicKeyNegate (pubkey, compressed = true, output) {\n      isUint8Array('public key', pubkey, [33, 65])\n      isCompressed(compressed)\n      output = getAssertedOutput(output, compressed ? 33 : 65)\n\n      switch (secp256k1.publicKeyNegate(output, pubkey)) {\n        case 0:\n          return output\n        case 1:\n          throw new Error(errors.PUBKEY_PARSE)\n        case 2:\n          throw new Error(errors.IMPOSSIBLE_CASE)\n        case 3:\n          throw new Error(errors.PUBKEY_SERIALIZE)\n      }\n    },\n\n    publicKeyCombine (pubkeys, compressed = true, output) {\n      assert(Array.isArray(pubkeys), 'Expected public keys to be an Array')\n      assert(pubkeys.length > 0, 'Expected public keys array will have more than zero items')\n      for (const pubkey of pubkeys) {\n        isUint8Array('public key', pubkey, [33, 65])\n      }\n      isCompressed(compressed)\n      output = getAssertedOutput(output, compressed ? 33 : 65)\n\n      switch (secp256k1.publicKeyCombine(output, pubkeys)) {\n        case 0:\n          return output\n        case 1:\n          throw new Error(errors.PUBKEY_PARSE)\n        case 2:\n          throw new Error(errors.PUBKEY_COMBINE)\n        case 3:\n          throw new Error(errors.PUBKEY_SERIALIZE)\n      }\n    },\n\n    publicKeyTweakAdd (pubkey, tweak, compressed = true, output) {\n      isUint8Array('public key', pubkey, [33, 65])\n      isUint8Array('tweak', tweak, 32)\n      isCompressed(compressed)\n      output = getAssertedOutput(output, compressed ? 33 : 65)\n\n      switch (secp256k1.publicKeyTweakAdd(output, pubkey, tweak)) {\n        case 0:\n          return output\n        case 1:\n          throw new Error(errors.PUBKEY_PARSE)\n        case 2:\n          throw new Error(errors.TWEAK_ADD)\n      }\n    },\n\n    publicKeyTweakMul (pubkey, tweak, compressed = true, output) {\n      isUint8Array('public key', pubkey, [33, 65])\n      isUint8Array('tweak', tweak, 32)\n      isCompressed(compressed)\n      output = getAssertedOutput(output, compressed ? 33 : 65)\n\n      switch (secp256k1.publicKeyTweakMul(output, pubkey, tweak)) {\n        case 0:\n          return output\n        case 1:\n          throw new Error(errors.PUBKEY_PARSE)\n        case 2:\n          throw new Error(errors.TWEAK_MUL)\n      }\n    },\n\n    signatureNormalize (sig) {\n      isUint8Array('signature', sig, 64)\n\n      switch (secp256k1.signatureNormalize(sig)) {\n        case 0:\n          return sig\n        case 1:\n          throw new Error(errors.SIG_PARSE)\n      }\n    },\n\n    signatureExport (sig, output) {\n      isUint8Array('signature', sig, 64)\n      output = getAssertedOutput(output, 72)\n\n      const obj = { output, outputlen: 72 }\n      switch (secp256k1.signatureExport(obj, sig)) {\n        case 0:\n          return output.slice(0, obj.outputlen)\n        case 1:\n          throw new Error(errors.SIG_PARSE)\n        case 2:\n          throw new Error(errors.IMPOSSIBLE_CASE)\n      }\n    },\n\n    signatureImport (sig, output) {\n      isUint8Array('signature', sig)\n      output = getAssertedOutput(output, 64)\n\n      switch (secp256k1.signatureImport(output, sig)) {\n        case 0:\n          return output\n        case 1:\n          throw new Error(errors.SIG_PARSE)\n        case 2:\n          throw new Error(errors.IMPOSSIBLE_CASE)\n      }\n    },\n\n    ecdsaSign (msg32, seckey, options = {}, output) {\n      isUint8Array('message', msg32, 32)\n      isUint8Array('private key', seckey, 32)\n      assert(toTypeString(options) === 'Object', 'Expected options to be an Object')\n      if (options.data !== undefined) isUint8Array('options.data', options.data)\n      if (options.noncefn !== undefined) assert(toTypeString(options.noncefn) === 'Function', 'Expected options.noncefn to be a Function')\n      output = getAssertedOutput(output, 64)\n\n      const obj = { signature: output, recid: null }\n      switch (secp256k1.ecdsaSign(obj, msg32, seckey, options.data, options.noncefn)) {\n        case 0:\n          return obj\n        case 1:\n          throw new Error(errors.SIGN)\n        case 2:\n          throw new Error(errors.IMPOSSIBLE_CASE)\n      }\n    },\n\n    ecdsaVerify (sig, msg32, pubkey) {\n      isUint8Array('signature', sig, 64)\n      isUint8Array('message', msg32, 32)\n      isUint8Array('public key', pubkey, [33, 65])\n\n      switch (secp256k1.ecdsaVerify(sig, msg32, pubkey)) {\n        case 0:\n          return true\n        case 3:\n          return false\n        case 1:\n          throw new Error(errors.SIG_PARSE)\n        case 2:\n          throw new Error(errors.PUBKEY_PARSE)\n      }\n    },\n\n    ecdsaRecover (sig, recid, msg32, compressed = true, output) {\n      isUint8Array('signature', sig, 64)\n      assert(\n        toTypeString(recid) === 'Number' &&\n          recid >= 0 &&\n          recid <= 3,\n        'Expected recovery id to be a Number within interval [0, 3]'\n      )\n      isUint8Array('message', msg32, 32)\n      isCompressed(compressed)\n      output = getAssertedOutput(output, compressed ? 33 : 65)\n\n      switch (secp256k1.ecdsaRecover(output, sig, recid, msg32)) {\n        case 0:\n          return output\n        case 1:\n          throw new Error(errors.SIG_PARSE)\n        case 2:\n          throw new Error(errors.RECOVER)\n        case 3:\n          throw new Error(errors.IMPOSSIBLE_CASE)\n      }\n    },\n\n    ecdh (pubkey, seckey, options = {}, output) {\n      isUint8Array('public key', pubkey, [33, 65])\n      isUint8Array('private key', seckey, 32)\n      assert(toTypeString(options) === 'Object', 'Expected options to be an Object')\n      if (options.data !== undefined) isUint8Array('options.data', options.data)\n      if (options.hashfn !== undefined) {\n        assert(toTypeString(options.hashfn) === 'Function', 'Expected options.hashfn to be a Function')\n        if (options.xbuf !== undefined) isUint8Array('options.xbuf', options.xbuf, 32)\n        if (options.ybuf !== undefined) isUint8Array('options.ybuf', options.ybuf, 32)\n        isUint8Array('output', output)\n      } else {\n        output = getAssertedOutput(output, 32)\n      }\n\n      switch (secp256k1.ecdh(output, pubkey, seckey, options.data, options.hashfn, options.xbuf, options.ybuf)) {\n        case 0:\n          return output\n        case 1:\n          throw new Error(errors.PUBKEY_PARSE)\n        case 2:\n          throw new Error(errors.ECDH)\n      }\n    }\n  }\n}\n","const EC = require('elliptic').ec\n\nconst ec = new EC('secp256k1')\nconst ecparams = ec.curve\n\n// Hack, we can not use bn.js@5, while elliptic uses bn.js@4\n// See https://github.com/indutny/elliptic/issues/191#issuecomment-569888758\nconst BN = ecparams.n.constructor\n\nfunction loadCompressedPublicKey (first, xbuf) {\n  let x = new BN(xbuf)\n\n  // overflow\n  if (x.cmp(ecparams.p) >= 0) return null\n  x = x.toRed(ecparams.red)\n\n  // compute corresponding Y\n  let y = x.redSqr().redIMul(x).redIAdd(ecparams.b).redSqrt()\n  if ((first === 0x03) !== y.isOdd()) y = y.redNeg()\n\n  return ec.keyPair({ pub: { x: x, y: y } })\n}\n\nfunction loadUncompressedPublicKey (first, xbuf, ybuf) {\n  let x = new BN(xbuf)\n  let y = new BN(ybuf)\n\n  // overflow\n  if (x.cmp(ecparams.p) >= 0 || y.cmp(ecparams.p) >= 0) return null\n\n  x = x.toRed(ecparams.red)\n  y = y.toRed(ecparams.red)\n\n  // is odd flag\n  if ((first === 0x06 || first === 0x07) && y.isOdd() !== (first === 0x07)) return null\n\n  // x*x*x + b = y*y\n  const x3 = x.redSqr().redIMul(x)\n  if (!y.redSqr().redISub(x3.redIAdd(ecparams.b)).isZero()) return null\n\n  return ec.keyPair({ pub: { x: x, y: y } })\n}\n\nfunction loadPublicKey (pubkey) {\n  // length should be validated in interface\n  const first = pubkey[0]\n  switch (first) {\n    case 0x02:\n    case 0x03:\n      if (pubkey.length !== 33) return null\n      return loadCompressedPublicKey(first, pubkey.subarray(1, 33))\n    case 0x04:\n    case 0x06:\n    case 0x07:\n      if (pubkey.length !== 65) return null\n      return loadUncompressedPublicKey(first, pubkey.subarray(1, 33), pubkey.subarray(33, 65))\n    default:\n      return null\n  }\n}\n\nfunction savePublicKey (output, point) {\n  const pubkey = point.encode(null, output.length === 33)\n  // Loop should be faster because we do not need create extra Uint8Array\n  // output.set(new Uint8Array(pubkey))\n  for (let i = 0; i < output.length; ++i) output[i] = pubkey[i]\n}\n\nmodule.exports = {\n  contextRandomize () {\n    return 0\n  },\n\n  privateKeyVerify (seckey) {\n    const bn = new BN(seckey)\n    return bn.cmp(ecparams.n) < 0 && !bn.isZero() ? 0 : 1\n  },\n\n  privateKeyNegate (seckey) {\n    const bn = new BN(seckey)\n    const negate = ecparams.n.sub(bn).umod(ecparams.n).toArrayLike(Uint8Array, 'be', 32)\n    seckey.set(negate)\n    return 0\n  },\n\n  privateKeyTweakAdd (seckey, tweak) {\n    const bn = new BN(tweak)\n    if (bn.cmp(ecparams.n) >= 0) return 1\n\n    bn.iadd(new BN(seckey))\n    if (bn.cmp(ecparams.n) >= 0) bn.isub(ecparams.n)\n    if (bn.isZero()) return 1\n\n    const tweaked = bn.toArrayLike(Uint8Array, 'be', 32)\n    seckey.set(tweaked)\n\n    return 0\n  },\n\n  privateKeyTweakMul (seckey, tweak) {\n    let bn = new BN(tweak)\n    if (bn.cmp(ecparams.n) >= 0 || bn.isZero()) return 1\n\n    bn.imul(new BN(seckey))\n    if (bn.cmp(ecparams.n) >= 0) bn = bn.umod(ecparams.n)\n\n    const tweaked = bn.toArrayLike(Uint8Array, 'be', 32)\n    seckey.set(tweaked)\n\n    return 0\n  },\n\n  publicKeyVerify (pubkey) {\n    const pair = loadPublicKey(pubkey)\n    return pair === null ? 1 : 0\n  },\n\n  publicKeyCreate (output, seckey) {\n    const bn = new BN(seckey)\n    if (bn.cmp(ecparams.n) >= 0 || bn.isZero()) return 1\n\n    const point = ec.keyFromPrivate(seckey).getPublic()\n    savePublicKey(output, point)\n\n    return 0\n  },\n\n  publicKeyConvert (output, pubkey) {\n    const pair = loadPublicKey(pubkey)\n    if (pair === null) return 1\n\n    const point = pair.getPublic()\n    savePublicKey(output, point)\n\n    return 0\n  },\n\n  publicKeyNegate (output, pubkey) {\n    const pair = loadPublicKey(pubkey)\n    if (pair === null) return 1\n\n    const point = pair.getPublic()\n    point.y = point.y.redNeg()\n    savePublicKey(output, point)\n\n    return 0\n  },\n\n  publicKeyCombine (output, pubkeys) {\n    const pairs = new Array(pubkeys.length)\n    for (let i = 0; i < pubkeys.length; ++i) {\n      pairs[i] = loadPublicKey(pubkeys[i])\n      if (pairs[i] === null) return 1\n    }\n\n    let point = pairs[0].getPublic()\n    for (let i = 1; i < pairs.length; ++i) point = point.add(pairs[i].pub)\n    if (point.isInfinity()) return 2\n\n    savePublicKey(output, point)\n\n    return 0\n  },\n\n  publicKeyTweakAdd (output, pubkey, tweak) {\n    const pair = loadPublicKey(pubkey)\n    if (pair === null) return 1\n\n    tweak = new BN(tweak)\n    if (tweak.cmp(ecparams.n) >= 0) return 2\n\n    const point = pair.getPublic().add(ecparams.g.mul(tweak))\n    if (point.isInfinity()) return 2\n\n    savePublicKey(output, point)\n\n    return 0\n  },\n\n  publicKeyTweakMul (output, pubkey, tweak) {\n    const pair = loadPublicKey(pubkey)\n    if (pair === null) return 1\n\n    tweak = new BN(tweak)\n    if (tweak.cmp(ecparams.n) >= 0 || tweak.isZero()) return 2\n\n    const point = pair.getPublic().mul(tweak)\n    savePublicKey(output, point)\n\n    return 0\n  },\n\n  signatureNormalize (sig) {\n    const r = new BN(sig.subarray(0, 32))\n    const s = new BN(sig.subarray(32, 64))\n    if (r.cmp(ecparams.n) >= 0 || s.cmp(ecparams.n) >= 0) return 1\n\n    if (s.cmp(ec.nh) === 1) {\n      sig.set(ecparams.n.sub(s).toArrayLike(Uint8Array, 'be', 32), 32)\n    }\n\n    return 0\n  },\n\n  // Copied 1-to-1 from https://github.com/bitcoinjs/bip66/blob/master/index.js\n  // Adapted for Uint8Array instead Buffer\n  signatureExport (obj, sig) {\n    const sigR = sig.subarray(0, 32)\n    const sigS = sig.subarray(32, 64)\n    if (new BN(sigR).cmp(ecparams.n) >= 0) return 1\n    if (new BN(sigS).cmp(ecparams.n) >= 0) return 1\n\n    const { output } = obj\n\n    // Prepare R\n    let r = output.subarray(4, 4 + 33)\n    r[0] = 0x00\n    r.set(sigR, 1)\n\n    let lenR = 33\n    let posR = 0\n    for (; lenR > 1 && r[posR] === 0x00 && !(r[posR + 1] & 0x80); --lenR, ++posR);\n\n    r = r.subarray(posR)\n    if (r[0] & 0x80) return 1\n    if (lenR > 1 && (r[0] === 0x00) && !(r[1] & 0x80)) return 1\n\n    // Prepare S\n    let s = output.subarray(6 + 33, 6 + 33 + 33)\n    s[0] = 0x00\n    s.set(sigS, 1)\n\n    let lenS = 33\n    let posS = 0\n    for (; lenS > 1 && s[posS] === 0x00 && !(s[posS + 1] & 0x80); --lenS, ++posS);\n\n    s = s.subarray(posS)\n    if (s[0] & 0x80) return 1\n    if (lenS > 1 && (s[0] === 0x00) && !(s[1] & 0x80)) return 1\n\n    // Set output length for return\n    obj.outputlen = 6 + lenR + lenS\n\n    // Output in specified format\n    // 0x30 [total-length] 0x02 [R-length] [R] 0x02 [S-length] [S]\n    output[0] = 0x30\n    output[1] = obj.outputlen - 2\n    output[2] = 0x02\n    output[3] = r.length\n    output.set(r, 4)\n    output[4 + lenR] = 0x02\n    output[5 + lenR] = s.length\n    output.set(s, 6 + lenR)\n\n    return 0\n  },\n\n  // Copied 1-to-1 from https://github.com/bitcoinjs/bip66/blob/master/index.js\n  // Adapted for Uint8Array instead Buffer\n  signatureImport (output, sig) {\n    if (sig.length < 8) return 1\n    if (sig.length > 72) return 1\n    if (sig[0] !== 0x30) return 1\n    if (sig[1] !== sig.length - 2) return 1\n    if (sig[2] !== 0x02) return 1\n\n    const lenR = sig[3]\n    if (lenR === 0) return 1\n    if (5 + lenR >= sig.length) return 1\n    if (sig[4 + lenR] !== 0x02) return 1\n\n    const lenS = sig[5 + lenR]\n    if (lenS === 0) return 1\n    if ((6 + lenR + lenS) !== sig.length) return 1\n\n    if (sig[4] & 0x80) return 1\n    if (lenR > 1 && (sig[4] === 0x00) && !(sig[5] & 0x80)) return 1\n\n    if (sig[lenR + 6] & 0x80) return 1\n    if (lenS > 1 && (sig[lenR + 6] === 0x00) && !(sig[lenR + 7] & 0x80)) return 1\n\n    let sigR = sig.subarray(4, 4 + lenR)\n    if (sigR.length === 33 && sigR[0] === 0x00) sigR = sigR.subarray(1)\n    if (sigR.length > 32) return 1\n\n    let sigS = sig.subarray(6 + lenR)\n    if (sigS.length === 33 && sigS[0] === 0x00) sigS = sigS.slice(1)\n    if (sigS.length > 32) throw new Error('S length is too long')\n\n    let r = new BN(sigR)\n    if (r.cmp(ecparams.n) >= 0) r = new BN(0)\n\n    let s = new BN(sig.subarray(6 + lenR))\n    if (s.cmp(ecparams.n) >= 0) s = new BN(0)\n\n    output.set(r.toArrayLike(Uint8Array, 'be', 32), 0)\n    output.set(s.toArrayLike(Uint8Array, 'be', 32), 32)\n\n    return 0\n  },\n\n  ecdsaSign (obj, message, seckey, data, noncefn) {\n    if (noncefn) {\n      const _noncefn = noncefn\n      noncefn = (counter) => {\n        const nonce = _noncefn(message, seckey, null, data, counter)\n\n        const isValid = nonce instanceof Uint8Array && nonce.length === 32\n        if (!isValid) throw new Error('This is the way')\n\n        return new BN(nonce)\n      }\n    }\n\n    const d = new BN(seckey)\n    if (d.cmp(ecparams.n) >= 0 || d.isZero()) return 1\n\n    let sig\n    try {\n      sig = ec.sign(message, seckey, { canonical: true, k: noncefn, pers: data })\n    } catch (err) {\n      return 1\n    }\n\n    obj.signature.set(sig.r.toArrayLike(Uint8Array, 'be', 32), 0)\n    obj.signature.set(sig.s.toArrayLike(Uint8Array, 'be', 32), 32)\n    obj.recid = sig.recoveryParam\n\n    return 0\n  },\n\n  ecdsaVerify (sig, msg32, pubkey) {\n    const sigObj = { r: sig.subarray(0, 32), s: sig.subarray(32, 64) }\n\n    const sigr = new BN(sigObj.r)\n    const sigs = new BN(sigObj.s)\n    if (sigr.cmp(ecparams.n) >= 0 || sigs.cmp(ecparams.n) >= 0) return 1\n    if (sigs.cmp(ec.nh) === 1 || sigr.isZero() || sigs.isZero()) return 3\n\n    const pair = loadPublicKey(pubkey)\n    if (pair === null) return 2\n\n    const point = pair.getPublic()\n    const isValid = ec.verify(msg32, sigObj, point)\n    return isValid ? 0 : 3\n  },\n\n  ecdsaRecover (output, sig, recid, msg32) {\n    const sigObj = { r: sig.slice(0, 32), s: sig.slice(32, 64) }\n\n    const sigr = new BN(sigObj.r)\n    const sigs = new BN(sigObj.s)\n    if (sigr.cmp(ecparams.n) >= 0 || sigs.cmp(ecparams.n) >= 0) return 1\n\n    if (sigr.isZero() || sigs.isZero()) return 2\n\n    // Can throw `throw new Error('Unable to find sencond key candinate');`\n    let point\n    try {\n      point = ec.recoverPubKey(msg32, sigObj, recid)\n    } catch (err) {\n      return 2\n    }\n\n    savePublicKey(output, point)\n\n    return 0\n  },\n\n  ecdh (output, pubkey, seckey, data, hashfn, xbuf, ybuf) {\n    const pair = loadPublicKey(pubkey)\n    if (pair === null) return 1\n\n    const scalar = new BN(seckey)\n    if (scalar.cmp(ecparams.n) >= 0 || scalar.isZero()) return 2\n\n    const point = pair.getPublic().mul(scalar)\n\n    if (hashfn === undefined) {\n      const data = point.encode(null, true)\n      const sha256 = ec.hash().update(data).digest()\n      for (let i = 0; i < 32; ++i) output[i] = sha256[i]\n    } else {\n      if (!xbuf) xbuf = new Uint8Array(32)\n      const x = point.getX().toArray('be', 32)\n      for (let i = 0; i < 32; ++i) xbuf[i] = x[i]\n\n      if (!ybuf) ybuf = new Uint8Array(32)\n      const y = point.getY().toArray('be', 32)\n      for (let i = 0; i < 32; ++i) ybuf[i] = y[i]\n\n      const hash = hashfn(xbuf, ybuf, data)\n\n      const isValid = hash instanceof Uint8Array && hash.length === output.length\n      if (!isValid) return 2\n\n      output.set(hash)\n    }\n\n    return 0\n  }\n}\n","var basex = require('base-x')\nvar ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n\nmodule.exports = basex(ALPHABET)\n"],"sourceRoot":""}